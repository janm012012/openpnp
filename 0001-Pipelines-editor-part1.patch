From 2b8620ca506ea87dab5375ce220a31ef6c78e6f4 Mon Sep 17 00:00:00 2001
From: karlinik <karlikova.nikola@gmail.com>
Date: Tue, 17 Aug 2021 22:36:21 +0200
Subject: [PATCH] Pipelines editor: UI::option to assign pipeline to individual
 part /1

Add new column to Parts tab to represent pipelines to add the possibility to assign pipeline to the part manually in the UI

*PackagesComboBoxModel: newly extends TableComboBoxModel
*PipelinesComboBoxModel: newly created
*PartsPanel: initial refactoring of the constructor
---
 src/main/java/org/openpnp/gui/PartsPanel.java | 230 +++++++++---------
 .../openpnp/gui/PipelinesComboBoxModel.java   |  18 ++
 .../gui/support/PackagesComboBoxModel.java    |  29 +--
 .../gui/support/TableComboBoxModel.java       |  43 +---
 .../java/org/openpnp/model/Configuration.java |  17 +-
 5 files changed, 149 insertions(+), 188 deletions(-)
 create mode 100644 src/main/java/org/openpnp/gui/PipelinesComboBoxModel.java

diff --git a/src/main/java/org/openpnp/gui/PartsPanel.java b/src/main/java/org/openpnp/gui/PartsPanel.java
index c82bd7e8c9..da2c0a45d4 100644
--- a/src/main/java/org/openpnp/gui/PartsPanel.java
+++ b/src/main/java/org/openpnp/gui/PartsPanel.java
@@ -26,9 +26,6 @@ import java.awt.datatransfer.Clipboard;
 import java.awt.datatransfer.DataFlavor;
 import java.awt.datatransfer.StringSelection;
 import java.awt.event.ActionEvent;
-import java.beans.PropertyChangeEvent;
-import java.beans.PropertyChangeListener;
-import java.io.StringReader;
 import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.List;
@@ -54,24 +51,24 @@ import javax.swing.ListSelectionModel;
 import javax.swing.RowFilter;
 import javax.swing.event.DocumentEvent;
 import javax.swing.event.DocumentListener;
-import javax.swing.event.ListSelectionEvent;
-import javax.swing.event.ListSelectionListener;
 import javax.swing.table.TableRowSorter;
 
 import org.openpnp.gui.components.AutoSelectTextTable;
 import org.openpnp.gui.support.*;
 import org.openpnp.gui.tablemodel.PartsTableModel;
 import org.openpnp.model.Configuration;
+import org.openpnp.model.Package;
 import org.openpnp.model.Part;
+import org.openpnp.model.Pipeline;
 import org.openpnp.spi.Feeder;
 import org.openpnp.spi.FiducialLocator;
-import org.openpnp.spi.PartAlignment;
 import org.openpnp.util.UiUtils;
 import org.pmw.tinylog.Logger;
 import org.simpleframework.xml.Serializer;
 
+import static javax.swing.SwingConstants.TOP;
+
 @SuppressWarnings("serial")
-//TODO NK: add new column Pipeline for quick assignment, same as package
 public class PartsPanel extends JPanel implements WizardContainer {
 
 
@@ -79,8 +76,8 @@ public class PartsPanel extends JPanel implements WizardContainer {
     private static final int PREF_DIVIDER_POSITION_DEF = -1;
     private Preferences prefs = Preferences.userNodeForPackage(PartsPanel.class);
 
-    final private Configuration configuration;
-    final private Frame frame;
+    private final Configuration configuration;
+    private final Frame frame;
 
     private PartsTableModel tableModel;
     private TableRowSorter<PartsTableModel> tableSorter;
@@ -88,6 +85,7 @@ public class PartsPanel extends JPanel implements WizardContainer {
     private JTable table;
     private ActionGroup singleSelectionActionGroup;
     private ActionGroup multiSelectionActionGroup;
+    private JTabbedPane tabbedPane;
 
     public PartsPanel(Configuration configuration, Frame frame) {
         this.configuration = configuration;
@@ -99,9 +97,60 @@ public class PartsPanel extends JPanel implements WizardContainer {
         multiSelectionActionGroup.setEnabled(false);
 
         setLayout(new BorderLayout(0, 0));
+
+        createAndAddToolbar();
+
         tableModel = new PartsTableModel();
         tableSorter = new TableRowSorter<>(tableModel);
 
+        JSplitPane splitPane = new JSplitPane();
+        splitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
+        splitPane.setContinuousLayout(true);
+        splitPane
+                .setDividerLocation(prefs.getInt(PREF_DIVIDER_POSITION, PREF_DIVIDER_POSITION_DEF));
+        splitPane.addPropertyChangeListener("dividerLocation", evt -> prefs.putInt(PREF_DIVIDER_POSITION, splitPane.getDividerLocation()));
+        add(splitPane, BorderLayout.CENTER);
+
+        tabbedPane = new JTabbedPane(TOP);
+
+        tableSetup();
+        splitPane.setLeftComponent(new JScrollPane(table));
+        splitPane.setRightComponent(tabbedPane);
+
+        table.getSelectionModel().addListSelectionListener(e -> {
+            if (e.getValueIsAdjusting()) {
+                return;
+            }
+
+            List<Part> selections = getSelections();
+
+            if (selections.size() > 1) {
+                singleSelectionActionGroup.setEnabled(false);
+                multiSelectionActionGroup.setEnabled(true);
+            } else {
+                multiSelectionActionGroup.setEnabled(false);
+                singleSelectionActionGroup.setEnabled(!selections.isEmpty());
+            }
+
+            Part part = getSelection();
+
+            int selectedTab = tabbedPane.getSelectedIndex();
+            tabbedPane.removeAll();
+
+            if (part != null) {
+                partSelectionSetup(part);
+            }
+
+            if (selectedTab >= 0 && selectedTab < tabbedPane.getTabCount()) {
+                tabbedPane.setSelectedIndex(selectedTab);
+            }
+
+            revalidate();
+            repaint();
+        });
+    }
+
+    private void createAndAddToolbar() {
         JPanel toolbarAndSearch = new JPanel();
         add(toolbarAndSearch, BorderLayout.NORTH);
         toolbarAndSearch.setLayout(new BorderLayout(0, 0));
@@ -110,11 +159,11 @@ public class PartsPanel extends JPanel implements WizardContainer {
         toolBar.setFloatable(false);
         toolbarAndSearch.add(toolBar);
 
-        JPanel panel_1 = new JPanel();
-        toolbarAndSearch.add(panel_1, BorderLayout.EAST);
+        JPanel upperPanel = new JPanel();
+        toolbarAndSearch.add(upperPanel, BorderLayout.EAST);
 
         JLabel lblSearch = new JLabel("Search");
-        panel_1.add(lblSearch);
+        upperPanel.add(lblSearch);
 
         searchTextField = new JTextField();
         searchTextField.getDocument().addDocumentListener(new DocumentListener() {
@@ -133,28 +182,32 @@ public class PartsPanel extends JPanel implements WizardContainer {
                 search();
             }
         });
-        panel_1.add(searchTextField);
+        upperPanel.add(searchTextField);
         searchTextField.setColumns(15);
 
-//        JComboBox packagesCombo = new JComboBox(new PackagesComboBoxModel());
-        JComboBox packagesCombo = new JComboBox(new TableComboBoxModel<org.openpnp.model.Package>("packages"));
-        packagesCombo.setMaximumRowCount(20);
-        packagesCombo.setRenderer(new IdentifiableListCellRenderer<org.openpnp.model.Package>());
+        toolBar.add(newPartAction);
+        toolBar.add(deletePartAction);
+        toolBar.addSeparator();
+        toolBar.add(pickPartAction);
 
-        JSplitPane splitPane = new JSplitPane();
-        splitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
-        splitPane.setContinuousLayout(true);
-        splitPane
-                .setDividerLocation(prefs.getInt(PREF_DIVIDER_POSITION, PREF_DIVIDER_POSITION_DEF));
-        splitPane.addPropertyChangeListener("dividerLocation", new PropertyChangeListener() {
-            @Override
-            public void propertyChange(PropertyChangeEvent evt) {
-                prefs.putInt(PREF_DIVIDER_POSITION, splitPane.getDividerLocation());
-            }
-        });
-        add(splitPane, BorderLayout.CENTER);
+        toolBar.addSeparator();
+        JButton copyToClipboardButton = new JButton(copyPartToClipboardAction);
+        copyToClipboardButton.setHideActionText(true);
+        toolBar.add(copyToClipboardButton);
 
-        JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
+        JButton pasteFromClipboardButton = new JButton(pastePartFromClipboardAction);
+        pasteFromClipboardButton.setHideActionText(true);
+        toolBar.add(pasteFromClipboardButton);
+    }
+
+    private void tableSetup() {
+        JComboBox<Package> packagesCombo = new JComboBox<>(new PackagesComboBoxModel());
+        packagesCombo.setMaximumRowCount(20);
+        packagesCombo.setRenderer(new IdentifiableListCellRenderer<>());
+
+        JComboBox<Pipeline> pipelinesCombo = new JComboBox<>(new PipelinesComboBoxModel());
+        pipelinesCombo.setMaximumRowCount(20);
+        pipelinesCombo.setRenderer(new IdentifiableListCellRenderer<>());
 
         table = new AutoSelectTextTable(tableModel);
         table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
@@ -163,84 +216,40 @@ public class PartsPanel extends JPanel implements WizardContainer {
         table.setDefaultRenderer(org.openpnp.model.Package.class,
                 new IdentifiableTableCellRenderer<org.openpnp.model.Package>());
 
+        table.setDefaultEditor(org.openpnp.model.Pipeline.class,
+                new DefaultCellEditor(pipelinesCombo));
         table.setDefaultRenderer(org.openpnp.model.Pipeline.class,
                 new IdentifiableTableCellRenderer<org.openpnp.model.Pipeline>());
 
         table.setRowSorter(tableSorter);
         table.getTableHeader().setDefaultRenderer(new MultisortTableHeaderCellRenderer());
-        splitPane.setLeftComponent(new JScrollPane(table));
-        splitPane.setRightComponent(tabbedPane);
-
-        toolBar.add(newPartAction);
-        toolBar.add(deletePartAction);
-        toolBar.addSeparator();
-        toolBar.add(pickPartAction);
-
-        toolBar.addSeparator();
-        JButton btnNewButton = new JButton(copyPartToClipboardAction);
-        btnNewButton.setHideActionText(true);
-        toolBar.add(btnNewButton);
-
-        JButton btnNewButton_1 = new JButton(pastePartToClipboardAction);
-        btnNewButton_1.setHideActionText(true);
-        toolBar.add(btnNewButton_1);
-
-        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
-            @Override
-            public void valueChanged(ListSelectionEvent e) {
-                if (e.getValueIsAdjusting()) {
-                    return;
-                }
-
-                List<Part> selections = getSelections();
-
-                if (selections.size() > 1) {
-                    singleSelectionActionGroup.setEnabled(false);
-                    multiSelectionActionGroup.setEnabled(true);
-                } else {
-                    multiSelectionActionGroup.setEnabled(false);
-                    singleSelectionActionGroup.setEnabled(!selections.isEmpty());
-                }
+    }
 
-                Part part = getSelection();
+    private void partSelectionSetup(Part part) {
+        tabbedPane.add("Settings", new JScrollPane(new PartSettingsPanel(part)));
 
-                int selectedTab = tabbedPane.getSelectedIndex();
-                tabbedPane.removeAll();
-
-                if (part != null) {
-                    tabbedPane.add("Settings", new JScrollPane(new PartSettingsPanel(part)));
-
-                    for (PartAlignment partAlignment : Configuration.get().getMachine().getPartAlignments()) {
-                        Wizard wizard = partAlignment.getPartConfigurationWizard(part);
-                        if (wizard != null) {
-                            JPanel panel = new JPanel();
-                            panel.setLayout(new BorderLayout());
-                            panel.add(wizard.getWizardPanel());
-                            tabbedPane.add(wizard.getWizardName(), new JScrollPane(panel));
-                            wizard.setWizardContainer(PartsPanel.this);
-                        }
-                    }
+        createBottomVisionPanel(part);
+        createFiducialLocatorPanel(part);
+    }
 
-                    FiducialLocator fiducialLocator =
-                            Configuration.get().getMachine().getFiducialLocator();
-                    Wizard wizard = fiducialLocator.getPartConfigurationWizard(part);
-                    if (wizard != null) {
-                        JPanel panel = new JPanel();
-                        panel.setLayout(new BorderLayout());
-                        panel.add(wizard.getWizardPanel());
-                        tabbedPane.add(wizard.getWizardName(), new JScrollPane(panel));
-                        wizard.setWizardContainer(PartsPanel.this);
-                    }
-                }
+    private void createBottomVisionPanel(Part part) {
+        Configuration.get().getMachine().getPartAlignments().forEach(partAlignment ->
+            addPanelToTabbedPane(partAlignment.getPartConfigurationWizard(part)));
+    }
 
-                if (selectedTab >= 0 && selectedTab < tabbedPane.getTabCount()) {
-                    tabbedPane.setSelectedIndex(selectedTab);
-                }
+    private void createFiducialLocatorPanel(Part part) {
+        FiducialLocator fiducialLocator = Configuration.get().getMachine().getFiducialLocator();
+        addPanelToTabbedPane(fiducialLocator.getPartConfigurationWizard(part));
+    }
 
-                revalidate();
-                repaint();
-            }
-        });
+    private void addPanelToTabbedPane(Wizard wizard) {
+        if (wizard != null) {
+            JPanel panel = new JPanel();
+            panel.setLayout(new BorderLayout());
+            panel.add(wizard.getWizardPanel());
+            tabbedPane.add(wizard.getWizardName(), new JScrollPane(panel));
+            wizard.setWizardContainer(PartsPanel.this);
+        }
     }
 
     private Part getSelection() {
@@ -281,7 +290,7 @@ public class PartsPanel extends JPanel implements WizardContainer {
 
         @Override
         public void actionPerformed(ActionEvent arg0) {
-            if (Configuration.get().getPackages().size() == 0) {
+            if (Configuration.get().getPackages().isEmpty()) {
                 MessageBoxes.errorBox(getTopLevelAncestor(), "Error",
                         "There are currently no packages defined in the system. Please create at least one package before creating a part.");
                 return;
@@ -290,18 +299,18 @@ public class PartsPanel extends JPanel implements WizardContainer {
             String id;
             while ((id = JOptionPane.showInputDialog(frame,
                     "Please enter an ID for the new part.")) != null) {
-                if (configuration.getPart(id) != null) {
-                    MessageBoxes.errorBox(frame, "Error", "Part ID " + id + " already exists.");
-                    continue;
-                }
-                Part part = new Part(id);
+                if (configuration.getPart(id) == null) {
+                    Part part = new Part(id);
 
-                part.setPackage(Configuration.get().getPackages().get(0));
+                    part.setPackage(Configuration.get().getPackages().get(0));
 
-                configuration.addPart(part);
-                tableModel.fireTableDataChanged();
-                Helpers.selectLastTableRow(table);
-                break;
+                    configuration.addPart(part);
+                    tableModel.fireTableDataChanged();
+                    Helpers.selectLastTableRow(table);
+                    break;
+                }
+
+                MessageBoxes.errorBox(frame, "Error", "Part ID " + id + " already exists.");
             }
         }
     };
@@ -389,7 +398,7 @@ public class PartsPanel extends JPanel implements WizardContainer {
         }
     };
 
-    public final Action pastePartToClipboardAction = new AbstractAction() {
+    public final Action pastePartFromClipboardAction = new AbstractAction() {
         {
             putValue(SMALL_ICON, Icons.paste);
             putValue(NAME, "Create Part from Clipboard");
@@ -402,7 +411,6 @@ public class PartsPanel extends JPanel implements WizardContainer {
                 Serializer ser = Configuration.createSerializer();
                 Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                 String s = (String) clipboard.getData(DataFlavor.stringFlavor);
-                StringReader r = new StringReader(s);
                 Part part = ser.read(Part.class, s);
                 for (int i = 0; ; i++) {
                     if (Configuration.get().getPart(part.getId() + "-" + i) == null) {
diff --git a/src/main/java/org/openpnp/gui/PipelinesComboBoxModel.java b/src/main/java/org/openpnp/gui/PipelinesComboBoxModel.java
new file mode 100644
index 0000000000..d09f891a88
--- /dev/null
+++ b/src/main/java/org/openpnp/gui/PipelinesComboBoxModel.java
@@ -0,0 +1,18 @@
+package org.openpnp.gui;
+
+import org.openpnp.gui.support.TableComboBoxModel;
+import org.openpnp.model.Configuration;
+import org.openpnp.model.Pipeline;
+
+@SuppressWarnings("serial")
+public class PipelinesComboBoxModel extends TableComboBoxModel<Pipeline> {
+
+    public PipelinesComboBoxModel() {
+        super("pipelines");
+    }
+
+    @Override
+    protected void addAllElements() {
+        Configuration.get().getPipelines().stream().sorted(comparator).forEach(this::addElement);
+    }
+}
diff --git a/src/main/java/org/openpnp/gui/support/PackagesComboBoxModel.java b/src/main/java/org/openpnp/gui/support/PackagesComboBoxModel.java
index ede4cab6d8..69e1dcec7d 100644
--- a/src/main/java/org/openpnp/gui/support/PackagesComboBoxModel.java
+++ b/src/main/java/org/openpnp/gui/support/PackagesComboBoxModel.java
@@ -19,37 +19,18 @@
 
 package org.openpnp.gui.support;
 
-import java.beans.PropertyChangeEvent;
-import java.beans.PropertyChangeListener;
-import java.util.ArrayList;
-import java.util.Collections;
-
-import javax.swing.DefaultComboBoxModel;
-
 import org.openpnp.model.Configuration;
+import org.openpnp.model.Package;
 
 @SuppressWarnings("serial")
-public class PackagesComboBoxModel extends DefaultComboBoxModel implements PropertyChangeListener {
-    private IdentifiableComparator<org.openpnp.model.Package> comparator =
-            new IdentifiableComparator<>();
+public class PackagesComboBoxModel extends TableComboBoxModel<Package> {
 
     public PackagesComboBoxModel() {
-        addAllElements();
-        Configuration.get().addPropertyChangeListener("packages", this);
-    }
-
-    private void addAllElements() {
-        ArrayList<org.openpnp.model.Package> packages =
-                new ArrayList<>(Configuration.get().getPackages());
-        Collections.sort(packages, comparator);
-        for (org.openpnp.model.Package pkg : packages) {
-            addElement(pkg);
-        }
+        super("packages");
     }
 
     @Override
-    public void propertyChange(PropertyChangeEvent evt) {
-        removeAllElements();
-        addAllElements();
+    protected void addAllElements() {
+        Configuration.get().getPackages().stream().sorted(comparator).forEach(this::addElement);
     }
 }
diff --git a/src/main/java/org/openpnp/gui/support/TableComboBoxModel.java b/src/main/java/org/openpnp/gui/support/TableComboBoxModel.java
index fd8baedfd7..bd2e96e607 100644
--- a/src/main/java/org/openpnp/gui/support/TableComboBoxModel.java
+++ b/src/main/java/org/openpnp/gui/support/TableComboBoxModel.java
@@ -1,22 +1,3 @@
-/*
- * Copyright (C) 2011 Jason von Nieda <jason@vonnieda.org>
- * 
- * This file is part of OpenPnP.
- * 
- * OpenPnP is free software: you can redistribute it and/or modify it under the terms of the GNU
- * General Public License as published by the Free Software Foundation, either version 3 of the
- * License, or (at your option) any later version.
- * 
- * OpenPnP is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
- * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
- * Public License for more details.
- * 
- * You should have received a copy of the GNU General Public License along with OpenPnP. If not, see
- * <http://www.gnu.org/licenses/>.
- * 
- * For more information about OpenPnP visit http://openpnp.org
- */
-
 package org.openpnp.gui.support;
 
 import org.openpnp.model.Configuration;
@@ -25,35 +6,23 @@ import org.openpnp.model.Identifiable;
 import javax.swing.*;
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
-import java.util.ArrayList;
-import java.util.Collection;
 
 @SuppressWarnings("serial")
-public class TableComboBoxModel<T extends Identifiable> extends DefaultComboBoxModel implements PropertyChangeListener {
-    private final IdentifiableComparator<T> comparator = new IdentifiableComparator<>();
+public class TableComboBoxModel<T extends Identifiable> extends DefaultComboBoxModel<T> implements PropertyChangeListener {
+    protected final IdentifiableComparator<T> comparator = new IdentifiableComparator<>();
 
     public TableComboBoxModel(String property) {
-        addAllElements(property);
+        addAllElements();
         Configuration.get().addPropertyChangeListener(property, this);
     }
 
-    private void addAllElements(String property) {
-        ArrayList<T> elements;
-        if(property.equals("packages")) {
-            elements = new ArrayList<T>((Collection<? extends T>) Configuration.get().getPackages());
-        } else {
-            elements = (ArrayList<T>) Configuration.get().getPipelines();
-        }
-
-        elements.sort(comparator);
-        for (T element : elements) {
-            addElement(element);
-        }
+    protected void addAllElements() {
+        throw new UnsupportedOperationException("Calling this function from GeneralTableComboBoxModel is not supported");
     }
 
     @Override
     public void propertyChange(PropertyChangeEvent evt) {
         removeAllElements();
-        addAllElements(evt.getPropertyName());
+        addAllElements();
     }
 }
diff --git a/src/main/java/org/openpnp/model/Configuration.java b/src/main/java/org/openpnp/model/Configuration.java
index 098e97e95c..05b75442b1 100644
--- a/src/main/java/org/openpnp/model/Configuration.java
+++ b/src/main/java/org/openpnp/model/Configuration.java
@@ -28,13 +28,7 @@ import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
 import java.time.temporal.TemporalUnit;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Set;
+import java.util.*;
 import java.util.prefs.Preferences;
 
 import org.apache.commons.io.FileUtils;
@@ -738,13 +732,4 @@ public class Configuration extends AbstractModelObject {
         @ElementList(inline = true, entry = "pipeline", required = false)
         private ArrayList<Pipeline> pipelines = new ArrayList<>();
     }
-
-    public <T> List<? extends Identifiable> getCollection(T type) {
-        if (type instanceof Package) {
-            return Collections.unmodifiableList(new ArrayList<>(packages.values()));
-        }
-        else {
-            return Collections.unmodifiableList(new ArrayList<>(pipelines.values()));
-        }
-    }
 }
-- 
2.28.0.windows.1

