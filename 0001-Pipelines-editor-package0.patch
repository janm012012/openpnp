From da3e2d41392b71d8b9a6775e2294aafa5f2fbd79 Mon Sep 17 00:00:00 2001
From: karlinik <karlikova.nikola@gmail.com>
Date: Thu, 19 Aug 2021 22:54:08 +0200
Subject: [PATCH] Pipelines editor: UI::option to assign pipeline to individual
 package /0

Add new column to Packages tab to represent pipelines to add the possibility to assign pipeline to the package manually in the UI

*PackagesPanel - add new column, still not working, will fix later
---
 .../java/org/openpnp/gui/PackagesPanel.java   | 239 +++++++++---------
 src/main/java/org/openpnp/gui/PartsPanel.java |  80 +++---
 .../gui/tablemodel/PackagesTableModel.java    |  53 ++--
 src/main/java/org/openpnp/model/Package.java  |  22 +-
 4 files changed, 209 insertions(+), 185 deletions(-)

diff --git a/src/main/java/org/openpnp/gui/PackagesPanel.java b/src/main/java/org/openpnp/gui/PackagesPanel.java
index 4b5b9e956f..5b2241bedf 100644
--- a/src/main/java/org/openpnp/gui/PackagesPanel.java
+++ b/src/main/java/org/openpnp/gui/PackagesPanel.java
@@ -1,19 +1,19 @@
 /*
  * Copyright (C) 2011 Jason von Nieda <jason@vonnieda.org>
- * 
+ *
  * This file is package of OpenPnP.
- * 
+ *
  * OpenPnP is free software: you can redistribute it and/or modify it under the terms of the GNU
  * General Public License as published by the Free Software Foundation, either version 3 of the
  * License, or (at your option) any later version.
- * 
+ *
  * OpenPnP is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
  * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
  * Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License along with OpenPnP. If not, see
  * <http://www.gnu.org/licenses/>.
- * 
+ *
  * For more information about OpenPnP visit http://openpnp.org
  */
 
@@ -28,9 +28,6 @@ import java.awt.datatransfer.StringSelection;
 import java.awt.event.ActionEvent;
 import java.awt.event.ComponentAdapter;
 import java.awt.event.ComponentEvent;
-import java.beans.PropertyChangeEvent;
-import java.beans.PropertyChangeListener;
-import java.io.StringReader;
 import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.List;
@@ -38,39 +35,25 @@ import java.util.prefs.Preferences;
 import java.util.regex.PatternSyntaxException;
 import java.util.stream.Collectors;
 
-import javax.swing.AbstractAction;
-import javax.swing.Action;
-import javax.swing.JLabel;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JSplitPane;
-import javax.swing.JTabbedPane;
-import javax.swing.JTable;
-import javax.swing.JTextField;
-import javax.swing.JToolBar;
-import javax.swing.ListSelectionModel;
-import javax.swing.RowFilter;
+import javax.swing.*;
 import javax.swing.event.DocumentEvent;
 import javax.swing.event.DocumentListener;
-import javax.swing.event.ListSelectionEvent;
-import javax.swing.event.ListSelectionListener;
 import javax.swing.table.TableRowSorter;
 
 import org.openpnp.gui.components.AutoSelectTextTable;
 import org.openpnp.gui.components.CameraView;
-import org.openpnp.gui.support.ActionGroup;
-import org.openpnp.gui.support.Helpers;
-import org.openpnp.gui.support.Icons;
-import org.openpnp.gui.support.MessageBoxes;
+import org.openpnp.gui.support.*;
 import org.openpnp.gui.tablemodel.PackagesTableModel;
 import org.openpnp.model.Configuration;
 import org.openpnp.model.Package;
 import org.openpnp.model.Part;
+import org.openpnp.model.Pipeline;
 import org.openpnp.spi.Camera;
 import org.pmw.tinylog.Logger;
 import org.simpleframework.xml.Serializer;
 
+import static javax.swing.SwingConstants.TOP;
+
 @SuppressWarnings("serial")
 public class PackagesPanel extends JPanel {
 
@@ -79,8 +62,8 @@ public class PackagesPanel extends JPanel {
     private static final int PREF_DIVIDER_POSITION_DEF = -1;
     private Preferences prefs = Preferences.userNodeForPackage(PackagesPanel.class);
 
-    final private Configuration configuration;
-    final private Frame frame;
+    private final Configuration configuration;
+    private final Frame frame;
 
     private PackagesTableModel tableModel;
     private TableRowSorter<PackagesTableModel> tableSorter;
@@ -88,6 +71,7 @@ public class PackagesPanel extends JPanel {
     private JTable table;
     private ActionGroup singleSelectionActionGroup;
     private ActionGroup multiSelectionActionGroup;
+    private JTabbedPane tabbedPane;
 
     public PackagesPanel(Configuration configuration, Frame frame) {
         this.configuration = configuration;
@@ -97,11 +81,48 @@ public class PackagesPanel extends JPanel {
         singleSelectionActionGroup.setEnabled(false);
         multiSelectionActionGroup = new ActionGroup(deletePackageAction);
         multiSelectionActionGroup.setEnabled(false);
-        
+
         setLayout(new BorderLayout(0, 0));
-        tableModel = new PackagesTableModel(configuration);
+
+        createAndAddToolbar();
+
+        tableModel = new PackagesTableModel();
         tableSorter = new TableRowSorter<>(tableModel);
 
+        JSplitPane splitPane = new JSplitPane();
+        splitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
+        splitPane.setContinuousLayout(true);
+        splitPane
+                .setDividerLocation(prefs.getInt(PREF_DIVIDER_POSITION, PREF_DIVIDER_POSITION_DEF));
+        splitPane.addPropertyChangeListener("dividerLocation",
+                evt -> prefs.putInt(PREF_DIVIDER_POSITION, splitPane.getDividerLocation()));
+        add(splitPane, BorderLayout.CENTER);
+
+        tabbedPane = new JTabbedPane(TOP);
+
+        tableSetup();
+
+        splitPane.setLeftComponent(new JScrollPane(table));
+        splitPane.setRightComponent(tabbedPane);
+
+        addComponentListener(new ComponentAdapter() {
+            @Override
+            public void componentHidden(ComponentEvent e) {
+                try {
+                    Camera camera =
+                            Configuration.get().getMachine().getDefaultHead().getDefaultCamera();
+                    CameraView cameraView = MainFrame.get().getCameraViews().getCameraView(camera);
+                    if (cameraView == null) {
+                        return;
+                    }
+                    cameraView.removeReticle(PackageVisionPanel.class.getName());
+                } catch (Exception e1) {
+                }
+            }
+        });
+    }
+
+    private void createAndAddToolbar() {
         JPanel toolbarAndSearch = new JPanel();
         add(toolbarAndSearch, BorderLayout.NORTH);
         toolbarAndSearch.setLayout(new BorderLayout(0, 0));
@@ -110,11 +131,11 @@ public class PackagesPanel extends JPanel {
         toolBar.setFloatable(false);
         toolbarAndSearch.add(toolBar);
 
-        JPanel panel_1 = new JPanel();
-        toolbarAndSearch.add(panel_1, BorderLayout.EAST);
+        JPanel upperPanel = new JPanel();
+        toolbarAndSearch.add(upperPanel, BorderLayout.EAST);
 
         JLabel lblSearch = new JLabel("Search");
-        panel_1.add(lblSearch);
+        upperPanel.add(lblSearch);
 
         searchTextField = new JTextField();
         searchTextField.getDocument().addDocumentListener(new DocumentListener() {
@@ -133,92 +154,70 @@ public class PackagesPanel extends JPanel {
                 search();
             }
         });
-        panel_1.add(searchTextField);
+        upperPanel.add(searchTextField);
         searchTextField.setColumns(15);
 
-        JSplitPane splitPane = new JSplitPane();
-        splitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
-        splitPane.setContinuousLayout(true);
-        splitPane
-                .setDividerLocation(prefs.getInt(PREF_DIVIDER_POSITION, PREF_DIVIDER_POSITION_DEF));
-        splitPane.addPropertyChangeListener("dividerLocation", new PropertyChangeListener() {
-            @Override
-            public void propertyChange(PropertyChangeEvent evt) {
-                prefs.putInt(PREF_DIVIDER_POSITION, splitPane.getDividerLocation());
-            }
-        });
-        add(splitPane, BorderLayout.CENTER);
+        toolBar.add(newPackageAction);
+        toolBar.add(deletePackageAction);
+        toolBar.addSeparator();
+        toolBar.add(copyPackageToClipboardAction);
+        toolBar.add(pastePackageFromClipboardAction);
+    }
 
-        JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
+    private void tableSetup() {
+        JComboBox<Pipeline> pipelinesCombo = new JComboBox<>(new PipelinesComboBoxModel());
+        pipelinesCombo.setMaximumRowCount(20);
+        pipelinesCombo.setRenderer(new IdentifiableListCellRenderer<>());
 
         table = new AutoSelectTextTable(tableModel);
         table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
 
-        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
-            @Override
-            public void valueChanged(ListSelectionEvent e) {
-                if (e.getValueIsAdjusting()) {
-                    return;
-                }
-                
-                List<Package> selections = getSelections();
+        table.setDefaultEditor(Pipeline.class,
+                new DefaultCellEditor(pipelinesCombo));
+        table.setDefaultRenderer(Pipeline.class,
+                new IdentifiableTableCellRenderer<Pipeline>());
 
-                if (selections.size() > 1) {
-                    singleSelectionActionGroup.setEnabled(false);
-                    multiSelectionActionGroup.setEnabled(true);
-                }
-                else {
-                    multiSelectionActionGroup.setEnabled(false);
-                    singleSelectionActionGroup.setEnabled(!selections.isEmpty());
-                }
+        table.setRowSorter(tableSorter);
+        table.getTableHeader().setDefaultRenderer(new MultisortTableHeaderCellRenderer());
 
-                Package pkg = getSelection();
+        table.getSelectionModel().addListSelectionListener(e -> {
+            if (e.getValueIsAdjusting()) {
+                return;
+            }
 
-                int selectedTab = tabbedPane.getSelectedIndex();
-                tabbedPane.removeAll();
-                if (pkg != null) {
-                    tabbedPane.add("Nozzle Tips", new PackageNozzleTipsPanel(pkg));
-                    tabbedPane.add("Vision", new JScrollPane(new PackageVisionPanel(pkg.getFootprint())));
-                    tabbedPane.add("Settings", new JScrollPane(new PackageSettingsPanel(pkg)));
-                    if (selectedTab != -1) {
-                        tabbedPane.setSelectedIndex(selectedTab);
-                    }
-                }
+            List<Package> selections = getSelections();
 
-                revalidate();
-                repaint();
+            if (selections.size() > 1) {
+                singleSelectionActionGroup.setEnabled(false);
+                multiSelectionActionGroup.setEnabled(true);
+            } else {
+                multiSelectionActionGroup.setEnabled(false);
+                singleSelectionActionGroup.setEnabled(!selections.isEmpty());
             }
-        });
-
-        table.setRowSorter(tableSorter);
 
-        splitPane.setLeftComponent(new JScrollPane(table));
-        splitPane.setRightComponent(tabbedPane);
+            Package pkg = getSelection();
 
-        toolBar.add(newPackageAction);
-        toolBar.add(deletePackageAction);
-        toolBar.addSeparator();
-        toolBar.add(copyPackageToClipboardAction);
-        toolBar.add(pastePackageToClipboardAction);
+            int selectedTab = tabbedPane.getSelectedIndex();
+            tabbedPane.removeAll();
 
-        addComponentListener(new ComponentAdapter() {
-            @Override
-            public void componentHidden(ComponentEvent e) {
-                try {
-                    Camera camera =
-                            Configuration.get().getMachine().getDefaultHead().getDefaultCamera();
-                    CameraView cameraView = MainFrame.get().getCameraViews().getCameraView(camera);
-                    if (cameraView == null) {
-                        return;
-                    }
-                    cameraView.removeReticle(PackageVisionPanel.class.getName());
-                }
-                catch (Exception e1) {
-                }
+            if (pkg != null) {
+                packageSelectionSetup(pkg, selectedTab);
             }
+
+            revalidate();
+            repaint();
         });
     }
 
+    private void packageSelectionSetup(Package pkg, int selectedTab) {
+        tabbedPane.add("Nozzle Tips", new PackageNozzleTipsPanel(pkg));
+        tabbedPane.add("Vision", new JScrollPane(new PackageVisionPanel(pkg.getFootprint())));
+        tabbedPane.add("Settings", new JScrollPane(new PackageSettingsPanel(pkg)));
+        if (selectedTab != -1) {
+            tabbedPane.setSelectedIndex(selectedTab);
+        }
+    }
+
     private Package getSelection() {
         List<Package> selections = getSelections();
         if (selections.size() != 1) {
@@ -235,13 +234,13 @@ public class PackagesPanel extends JPanel {
         }
         return selections;
     }
+
     private void search() {
         RowFilter<PackagesTableModel, Object> rf = null;
         // If current expression doesn't parse, don't update.
         try {
             rf = RowFilter.regexFilter("(?i)" + searchTextField.getText().trim());
-        }
-        catch (PatternSyntaxException e) {
+        } catch (PatternSyntaxException e) {
             Logger.warn(e, "Search failed");
             return;
         }
@@ -260,16 +259,16 @@ public class PackagesPanel extends JPanel {
             String id;
             while ((id = JOptionPane.showInputDialog(frame,
                     "Please enter an ID for the new package.")) != null) {
-                if (configuration.getPackage(id) != null) {
-                    MessageBoxes.errorBox(frame, "Error", "Package ID " + id + " already exists.");
-                    continue;
+                if (configuration.getPackage(id) == null) {
+                    Package pkg = new Package(id);
+
+                    configuration.addPackage(pkg);
+                    tableModel.fireTableDataChanged();
+                    Helpers.selectLastTableRow(table);
+                    break;
                 }
-                Package this_package = new Package(id);
 
-                configuration.addPackage(this_package);
-                tableModel.fireTableDataChanged();
-                Helpers.selectLastTableRow(table);
-                break;
+                MessageBoxes.errorBox(frame, "Error", "Package ID " + id + " already exists.");
             }
         }
     };
@@ -295,16 +294,15 @@ public class PackagesPanel extends JPanel {
                     }
                 }
             }
-            
+
             List<String> ids = selections.stream().map(Package::getId).collect(Collectors.toList());
             String formattedIds;
             if (ids.size() <= 3) {
                 formattedIds = String.join(", ", ids);
-            }
-            else {
+            } else {
                 formattedIds = String.join(", ", ids.subList(0, 3)) + ", and " + (ids.size() - 3) + " others";
             }
-            
+
             int ret = JOptionPane.showConfirmDialog(getTopLevelAncestor(),
                     "Are you sure you want to delete " + formattedIds + "?",
                     "Delete " + selections.size() + " packages?", JOptionPane.YES_NO_OPTION);
@@ -337,14 +335,13 @@ public class PackagesPanel extends JPanel {
                 StringSelection stringSelection = new StringSelection(w.toString());
                 Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                 clipboard.setContents(stringSelection, null);
-            }
-            catch (Exception e) {
+            } catch (Exception e) {
                 MessageBoxes.errorBox(getTopLevelAncestor(), "Copy Failed", e);
             }
         }
     };
 
-    public final Action pastePackageToClipboardAction = new AbstractAction() {
+    public final Action pastePackageFromClipboardAction = new AbstractAction() {
         {
             putValue(SMALL_ICON, Icons.paste);
             putValue(NAME, "Create Package from Clipboard");
@@ -357,9 +354,8 @@ public class PackagesPanel extends JPanel {
                 Serializer ser = Configuration.createSerializer();
                 Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                 String s = (String) clipboard.getData(DataFlavor.stringFlavor);
-                StringReader r = new StringReader(s);
                 Package pkg = ser.read(Package.class, s);
-                for (int i = 0;; i++) {
+                for (int i = 0; ; i++) {
                     if (Configuration.get().getPackage(pkg.getId() + "-" + i) == null) {
                         pkg.setId(pkg.getId() + "-" + i);
                         Configuration.get().addPackage(pkg);
@@ -368,8 +364,7 @@ public class PackagesPanel extends JPanel {
                 }
                 tableModel.fireTableDataChanged();
                 Helpers.selectLastTableRow(table);
-            }
-            catch (Exception e) {
+            } catch (Exception e) {
                 MessageBoxes.errorBox(getTopLevelAncestor(), "Paste Failed", e);
             }
         }
diff --git a/src/main/java/org/openpnp/gui/PartsPanel.java b/src/main/java/org/openpnp/gui/PartsPanel.java
index da2c0a45d4..a7e300ba42 100644
--- a/src/main/java/org/openpnp/gui/PartsPanel.java
+++ b/src/main/java/org/openpnp/gui/PartsPanel.java
@@ -108,46 +108,16 @@ public class PartsPanel extends JPanel implements WizardContainer {
         splitPane.setContinuousLayout(true);
         splitPane
                 .setDividerLocation(prefs.getInt(PREF_DIVIDER_POSITION, PREF_DIVIDER_POSITION_DEF));
-        splitPane.addPropertyChangeListener("dividerLocation", evt -> prefs.putInt(PREF_DIVIDER_POSITION, splitPane.getDividerLocation()));
+        splitPane.addPropertyChangeListener("dividerLocation",
+                evt -> prefs.putInt(PREF_DIVIDER_POSITION, splitPane.getDividerLocation()));
         add(splitPane, BorderLayout.CENTER);
 
         tabbedPane = new JTabbedPane(TOP);
 
         tableSetup();
+
         splitPane.setLeftComponent(new JScrollPane(table));
         splitPane.setRightComponent(tabbedPane);
-
-        table.getSelectionModel().addListSelectionListener(e -> {
-            if (e.getValueIsAdjusting()) {
-                return;
-            }
-
-            List<Part> selections = getSelections();
-
-            if (selections.size() > 1) {
-                singleSelectionActionGroup.setEnabled(false);
-                multiSelectionActionGroup.setEnabled(true);
-            } else {
-                multiSelectionActionGroup.setEnabled(false);
-                singleSelectionActionGroup.setEnabled(!selections.isEmpty());
-            }
-
-            Part part = getSelection();
-
-            int selectedTab = tabbedPane.getSelectedIndex();
-            tabbedPane.removeAll();
-
-            if (part != null) {
-                partSelectionSetup(part);
-            }
-
-            if (selectedTab >= 0 && selectedTab < tabbedPane.getTabCount()) {
-                tabbedPane.setSelectedIndex(selectedTab);
-            }
-
-            revalidate();
-            repaint();
-        });
     }
 
     private void createAndAddToolbar() {
@@ -211,18 +181,50 @@ public class PartsPanel extends JPanel implements WizardContainer {
 
         table = new AutoSelectTextTable(tableModel);
         table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
-        table.setDefaultEditor(org.openpnp.model.Package.class,
+        table.setDefaultEditor(Package.class,
                 new DefaultCellEditor(packagesCombo));
-        table.setDefaultRenderer(org.openpnp.model.Package.class,
-                new IdentifiableTableCellRenderer<org.openpnp.model.Package>());
+        table.setDefaultRenderer(Package.class,
+                new IdentifiableTableCellRenderer<Package>());
 
-        table.setDefaultEditor(org.openpnp.model.Pipeline.class,
+        table.setDefaultEditor(Pipeline.class,
                 new DefaultCellEditor(pipelinesCombo));
-        table.setDefaultRenderer(org.openpnp.model.Pipeline.class,
-                new IdentifiableTableCellRenderer<org.openpnp.model.Pipeline>());
+        table.setDefaultRenderer(Pipeline.class,
+                new IdentifiableTableCellRenderer<Pipeline>());
 
         table.setRowSorter(tableSorter);
         table.getTableHeader().setDefaultRenderer(new MultisortTableHeaderCellRenderer());
+
+        table.getSelectionModel().addListSelectionListener(e -> {
+            if (e.getValueIsAdjusting()) {
+                return;
+            }
+
+            List<Part> selections = getSelections();
+
+            if (selections.size() > 1) {
+                singleSelectionActionGroup.setEnabled(false);
+                multiSelectionActionGroup.setEnabled(true);
+            } else {
+                multiSelectionActionGroup.setEnabled(false);
+                singleSelectionActionGroup.setEnabled(!selections.isEmpty());
+            }
+
+            Part part = getSelection();
+
+            int selectedTab = tabbedPane.getSelectedIndex();
+            tabbedPane.removeAll();
+
+            if (part != null) {
+                partSelectionSetup(part);
+            }
+
+            if (selectedTab >= 0 && selectedTab < tabbedPane.getTabCount()) {
+                tabbedPane.setSelectedIndex(selectedTab);
+            }
+
+            revalidate();
+            repaint();
+        });
     }
 
     private void partSelectionSetup(Part part) {
diff --git a/src/main/java/org/openpnp/gui/tablemodel/PackagesTableModel.java b/src/main/java/org/openpnp/gui/tablemodel/PackagesTableModel.java
index 2dfdf79cc9..e90e88cb95 100644
--- a/src/main/java/org/openpnp/gui/tablemodel/PackagesTableModel.java
+++ b/src/main/java/org/openpnp/gui/tablemodel/PackagesTableModel.java
@@ -28,21 +28,18 @@ import javax.swing.table.AbstractTableModel;
 
 import org.openpnp.model.Configuration;
 import org.openpnp.model.Package;
-// import org.openpnp.model.Package;
+import org.openpnp.model.Pipeline;
 
 @SuppressWarnings("serial")
 public class PackagesTableModel extends AbstractTableModel implements PropertyChangeListener {
-    final private Configuration configuration;
 
-    private String[] columnNames = new String[] {"ID", "Description", "Tape Specification"};
-    private Class[] columnTypes = new Class[] {String.class, String.class, String.class};
+    private String[] columnNames = new String[] {"ID", "Description", "Tape Specification", "Pipeline"};
+    private Class[] columnTypes = new Class[] {String.class, String.class, String.class, Pipeline.class};
     private List<Package> packages;
 
-    public PackagesTableModel(Configuration configuration) {
-        this.configuration = configuration;
-        configuration.addPropertyChangeListener("packages", this);
-        packages = new ArrayList<>(configuration.getPackages());
-
+    public PackagesTableModel() {
+        Configuration.get().addPropertyChangeListener("packages", this);
+        packages = new ArrayList<>(Configuration.get().getPackages());
     }
 
     @Override
@@ -75,12 +72,14 @@ public class PackagesTableModel extends AbstractTableModel implements PropertyCh
     @Override
     public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
         try {
-            Package this_package = packages.get(rowIndex);
+            Package pkg = packages.get(rowIndex);
             if (columnIndex == 1) {
-                this_package.setDescription((String) aValue);
+                pkg.setDescription((String) aValue);
             }
             else if (columnIndex == 2) {
-                this_package.setTapeSpecification((String) aValue);
+                pkg.setTapeSpecification((String) aValue);
+            } else if (columnIndex == 3) {
+                pkg.setPipeline((Pipeline) aValue);
             }
         }
         catch (Exception e) {
@@ -89,14 +88,16 @@ public class PackagesTableModel extends AbstractTableModel implements PropertyCh
     }
 
     public Object getValueAt(int row, int col) {
-        Package this_package = packages.get(row);
+        Package pkg = packages.get(row);
         switch (col) {
             case 0:
-                return this_package.getId();
+                return pkg.getId();
             case 1:
-                return this_package.getDescription();
+                return pkg.getDescription();
             case 2:
-                return this_package.getTapeSpecification();
+                return pkg.getTapeSpecification();
+            case 3:
+                return pkg.getPipeline();
             default:
                 return null;
         }
@@ -104,7 +105,25 @@ public class PackagesTableModel extends AbstractTableModel implements PropertyCh
 
     @Override
     public void propertyChange(PropertyChangeEvent arg0) {
-        packages = new ArrayList<>(configuration.getPackages());
+        packages = new ArrayList<>(Configuration.get().getPackages());
         fireTableDataChanged();
+
+        if (arg0.getSource() instanceof Package) {
+            // Only single package data changed, but sort order might change, so still need fireTableDataChanged().
+            fireTableDataChanged();
+        }
+        else  {
+            // Parts list itself changes.
+            if (packages != null) {
+                for (Package pkg : packages) {
+                    pkg.removePropertyChangeListener(this);
+                }
+            }
+            packages = new ArrayList<>(Configuration.get().getPackages());
+            fireTableDataChanged();
+            for (Package pkg : packages) {
+                pkg.addPropertyChangeListener(this);
+            }
+        }
     }
 }
diff --git a/src/main/java/org/openpnp/model/Package.java b/src/main/java/org/openpnp/model/Package.java
index 080941a8a7..51b32ec00d 100644
--- a/src/main/java/org/openpnp/model/Package.java
+++ b/src/main/java/org/openpnp/model/Package.java
@@ -25,6 +25,7 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
+import org.openpnp.ConfigurationListener;
 import org.openpnp.spi.NozzleTip;
 import org.simpleframework.xml.Attribute;
 import org.simpleframework.xml.Element;
@@ -71,13 +72,12 @@ public class Package extends AbstractModelObject implements Identifiable {
         this.id = id;
         footprint = new Footprint();
 
-//        Configuration.get().addListener(new ConfigurationListener.Adapter() {
-//            @Override
-//            public void configurationLoaded(Configuration configuration) throws Exception {
-//                Machine machine = configuration.getMachine();
-//                pipeline = machine.getPipeline(pipelineId);
-//            }
-//        });
+        Configuration.get().addListener(new ConfigurationListener.Adapter() {
+            @Override
+            public void configurationLoaded(Configuration configuration) {
+                pipeline = configuration.getPipeline(pipelineId);
+            }
+        });
     }
 
     @Override
@@ -187,4 +187,12 @@ public class Package extends AbstractModelObject implements Identifiable {
         syncCompatibleNozzleTipIds();
         firePropertyChange("compatibleNozzleTips", null, getCompatibleNozzleTips());
     }
+
+    public Pipeline getPipeline() {
+        return pipeline;
+    }
+
+    public void setPipeline(Pipeline pipeline) {
+        this.pipeline = pipeline;
+    }
 }
-- 
2.28.0.windows.1

