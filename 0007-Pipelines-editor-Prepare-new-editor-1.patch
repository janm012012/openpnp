From f65d4be84013a0d5775f4a5804e3937620506d64 Mon Sep 17 00:00:00 2001
From: karlinik <karlikova.nikola@gmail.com>
Date: Tue, 14 Sep 2021 21:35:59 +0200
Subject: [PATCH 07/11] Pipelines editor: Prepare new editor /1

All parts linked to pipeline are displayed in the pipeline editor in new tab Parts/Packages
---
 .../org/openpnp/gui/PackageVisionPanel.java   |  4 +-
 .../vision/ReferenceBottomVision.java         | 19 +---
 .../wizards/VisionConfigurationWizard.java    | 25 ++----
 .../vision/pipeline/ui/CvPipelineEditor.java  | 33 +++++--
 .../ui/PipelineEditorPartsTableModel.java     | 86 +++++++++++++++++++
 .../vision/pipeline/ui/PipelinePanel.java     | 40 ++++++++-
 6 files changed, 161 insertions(+), 46 deletions(-)
 create mode 100644 src/main/java/org/openpnp/vision/pipeline/ui/PipelineEditorPartsTableModel.java

diff --git a/src/main/java/org/openpnp/gui/PackageVisionPanel.java b/src/main/java/org/openpnp/gui/PackageVisionPanel.java
index 7d29ce9848..89f9881b36 100644
--- a/src/main/java/org/openpnp/gui/PackageVisionPanel.java
+++ b/src/main/java/org/openpnp/gui/PackageVisionPanel.java
@@ -40,10 +40,8 @@ import org.openpnp.gui.support.DoubleConverter;
 import org.openpnp.gui.support.Helpers;
 import org.openpnp.gui.support.Icons;
 import org.openpnp.gui.tablemodel.FootprintTableModel;
-import org.openpnp.model.Configuration;
-import org.openpnp.model.Footprint;
+import org.openpnp.model.*;
 import org.openpnp.model.Footprint.Pad;
-import org.openpnp.model.LengthUnit;
 import org.openpnp.model.Package;
 import org.openpnp.spi.Camera;
 
diff --git a/src/main/java/org/openpnp/machine/reference/vision/ReferenceBottomVision.java b/src/main/java/org/openpnp/machine/reference/vision/ReferenceBottomVision.java
index b3273dd390..05fb29fa4d 100644
--- a/src/main/java/org/openpnp/machine/reference/vision/ReferenceBottomVision.java
+++ b/src/main/java/org/openpnp/machine/reference/vision/ReferenceBottomVision.java
@@ -61,9 +61,6 @@ public class ReferenceBottomVision implements PartAlignment {
     @ElementMap(required = false)
     protected Map<String, PartSettings> partSettingsByPartId = new HashMap<>();
 
-    @ElementMap(required = false)
-    protected Map<String, PipelineSettings> pipelineSettingByPipelineId = new HashMap<>();
-
     @Override
     public PartAlignmentOffset findOffsets(Part part, BoardLocation boardLocation,
             Location placementLocation, Nozzle nozzle) throws Exception {
@@ -520,21 +517,12 @@ public class ReferenceBottomVision implements PartAlignment {
     public PartSettings getPartSettings(Part part) {
         PartSettings partSettings = this.partSettingsByPartId.get(part.getId());
         if (partSettings == null) {
-            partSettings = new PartSettings(this, part);
+            partSettings = new PartSettings(this);
             this.partSettingsByPartId.put(part.getId(), partSettings);
         }
         return partSettings;
     }
 
-    private PipelineSettings getPipelineSettings(Pipeline pipeline) {
-        PipelineSettings pipelineSettings = this.pipelineSettingByPipelineId.get(pipeline.getId());
-        if (pipelineSettings == null) {
-            pipelineSettings = new PipelineSettings(pipeline);
-            this.pipelineSettingByPipelineId.put(pipeline.getId(), pipelineSettings);
-        }
-        return pipelineSettings;
-    }
-
     public Map<String, PartSettings> getPartSettingsByPartId() {
         return partSettingsByPartId;
     }
@@ -551,8 +539,7 @@ public class ReferenceBottomVision implements PartAlignment {
 
     @Override
     public Wizard getPipelineConfigurationWizard(Pipeline pipeline) {
-        PipelineSettings pipelineSettings = getPipelineSettings(pipeline);
-        return new VisionConfigurationWizard(pipelineSettings);
+        return new VisionConfigurationWizard(pipeline);
     }
 
     public enum PreRotateUsage {
@@ -591,7 +578,7 @@ public class ReferenceBottomVision implements PartAlignment {
 
         }
 
-        public PartSettings(ReferenceBottomVision bottomVision, Part part) {
+        public PartSettings(ReferenceBottomVision bottomVision) {
             setEnabled(bottomVision.isEnabled());
         }
 
diff --git a/src/main/java/org/openpnp/machine/reference/vision/wizards/VisionConfigurationWizard.java b/src/main/java/org/openpnp/machine/reference/vision/wizards/VisionConfigurationWizard.java
index db711be058..9681c82994 100644
--- a/src/main/java/org/openpnp/machine/reference/vision/wizards/VisionConfigurationWizard.java
+++ b/src/main/java/org/openpnp/machine/reference/vision/wizards/VisionConfigurationWizard.java
@@ -6,9 +6,8 @@ import com.jgoodies.forms.layout.FormSpecs;
 import com.jgoodies.forms.layout.RowSpec;
 import org.openpnp.gui.MainFrame;
 import org.openpnp.gui.support.AbstractConfigurationWizard;
-import org.openpnp.machine.reference.vision.ReferenceBottomVision;
+import org.openpnp.model.Pipeline;
 import org.openpnp.util.UiUtils;
-import org.openpnp.vision.pipeline.CvPipeline;
 import org.openpnp.vision.pipeline.ui.CvPipelineEditor;
 import org.openpnp.vision.pipeline.ui.CvPipelineEditorDialog;
 
@@ -17,7 +16,7 @@ import javax.swing.border.TitledBorder;
 
 @SuppressWarnings("serial")
 public class VisionConfigurationWizard extends AbstractConfigurationWizard {
-    private ReferenceBottomVision.PipelineSettings pipelineSettings;
+    private Pipeline pipeline;
 
     private JTextField idEntry;
     private JTextField nameEntry;
@@ -25,8 +24,8 @@ public class VisionConfigurationWizard extends AbstractConfigurationWizard {
     JPanel panel;
 
     //TODO: NK May need also ReferenceBottomVision or parts/packages settings
-    public VisionConfigurationWizard(ReferenceBottomVision.PipelineSettings pipelineSettings) {
-        this.pipelineSettings = pipelineSettings;
+    public VisionConfigurationWizard(Pipeline pipeline) {
+        this.pipeline = pipeline;
         createUi();
     }
 
@@ -37,11 +36,11 @@ public class VisionConfigurationWizard extends AbstractConfigurationWizard {
         JLabel lblName = new JLabel("Name");
 
         idEntry = new JTextField();
-        idEntry.setText(pipelineSettings.getId());
+        idEntry.setText(pipeline.getId());
         idEntry.setColumns(10);
 
         nameEntry = new JTextField();
-        nameEntry.setText(pipelineSettings.getName());
+        nameEntry.setText(pipeline.getName());
         nameEntry.setColumns(20);
 
         panel.add(lblId, "2, 2, right, default");
@@ -50,12 +49,7 @@ public class VisionConfigurationWizard extends AbstractConfigurationWizard {
         panel.add(nameEntry, "4, 4, left, default");
 
         JButton editPipelineButton = new JButton("Edit");
-        editPipelineButton.addActionListener(e -> UiUtils.messageBoxOnException(new UiUtils.Thrunnable() {
-            @Override
-            public void thrun() throws Exception {
-                editPipeline();
-            }
-        }));
+        editPipelineButton.addActionListener(e -> UiUtils.messageBoxOnException(this::editPipeline));
         panel.add(editPipelineButton, "4, 6");
     }
 
@@ -100,7 +94,6 @@ public class VisionConfigurationWizard extends AbstractConfigurationWizard {
     }
 
     private void editPipeline() {
-        CvPipeline pipeline = pipelineSettings.getPipeline();
         CvPipelineEditor editor = new CvPipelineEditor(pipeline, true);
         JDialog dialog = new CvPipelineEditorDialog(MainFrame.get(), "Vision Pipeline", editor);
         dialog.setVisible(true);
@@ -108,7 +101,7 @@ public class VisionConfigurationWizard extends AbstractConfigurationWizard {
 
     @Override
     public void createBindings() {
-        addWrappedBinding(pipelineSettings, "id", idEntry, "text");
-        addWrappedBinding(pipelineSettings, "name", nameEntry, "text");
+        addWrappedBinding(pipeline, "id", idEntry, "text");
+        addWrappedBinding(pipeline, "name", nameEntry, "text");
     }
 }
diff --git a/src/main/java/org/openpnp/vision/pipeline/ui/CvPipelineEditor.java b/src/main/java/org/openpnp/vision/pipeline/ui/CvPipelineEditor.java
index 940b92749d..30f5ffef3f 100644
--- a/src/main/java/org/openpnp/vision/pipeline/ui/CvPipelineEditor.java
+++ b/src/main/java/org/openpnp/vision/pipeline/ui/CvPipelineEditor.java
@@ -8,6 +8,7 @@ import java.util.Set;
 import javax.swing.JPanel;
 import javax.swing.JSplitPane;
 
+import org.openpnp.model.Pipeline;
 import org.openpnp.util.UiUtils;
 import org.openpnp.vision.pipeline.CvPipeline;
 import org.openpnp.vision.pipeline.CvStage;
@@ -162,20 +163,30 @@ public class CvPipelineEditor extends JPanel {
 
     private static final Set<Class<? extends CvStage>> stageClasses;
 
-    private final CvPipeline pipeline;
+    private final Pipeline pipeline;
     private PipelinePanel pipelinePanel;
     private ResultsPanel resultsPanel;
     
     private String originalVersion = "";
 
     public CvPipelineEditor(CvPipeline pipeline) {
-        this(pipeline, false);
+        this(null, pipeline, false);
     }
 
-    public CvPipelineEditor(CvPipeline pipeline, boolean tabs) {
-        this.pipeline = pipeline;
+    public CvPipelineEditor(Pipeline pipeline, boolean tabs) {
+        this(pipeline, pipeline.getCvPipeline(), tabs);
+    }
+
+    public CvPipelineEditor(Pipeline pipeline, CvPipeline cvPipeline, boolean tabs) {
+        if (pipeline == null) {
+            this.pipeline = new Pipeline();
+            this.pipeline.setCvPipeline(cvPipeline);
+        } else {
+            this.pipeline = pipeline;
+        }
+
         try {
-            originalVersion = pipeline.toXmlString();
+            originalVersion = this.pipeline.getCvPipeline().toXmlString();
         }
         catch (Exception e1) {
             // Do nothing
@@ -201,12 +212,16 @@ public class CvPipelineEditor extends JPanel {
         pipelinePanel.initializeFocus();    	
     }
     
-    public CvPipeline getPipeline() {
+    public Pipeline getUpperPipeline() {
         return pipeline;
     }
 
+    public CvPipeline getPipeline() {
+        return pipeline.getCvPipeline();
+    }
+
     public void process() {
-        UiUtils.messageBoxOnException(() -> getPipeline().process());
+        UiUtils.messageBoxOnException(() -> pipeline.getCvPipeline().process());
         resultsPanel.refresh();
     }
 
@@ -217,7 +232,7 @@ public class CvPipelineEditor extends JPanel {
     public boolean isDirty( ) {
         String editedVersion = "";
         try {
-            editedVersion = pipeline.toXmlString();
+            editedVersion = pipeline.getCvPipeline().toXmlString();
         }
         catch (Exception e) {
             // Do nothing
@@ -227,7 +242,7 @@ public class CvPipelineEditor extends JPanel {
     
     public void undoEdits() {
         try {
-            pipeline.fromXmlString(originalVersion);
+            pipeline.getCvPipeline().fromXmlString(originalVersion);
         }
         catch (Exception e) {
             // Do nothing
diff --git a/src/main/java/org/openpnp/vision/pipeline/ui/PipelineEditorPartsTableModel.java b/src/main/java/org/openpnp/vision/pipeline/ui/PipelineEditorPartsTableModel.java
new file mode 100644
index 0000000000..dc2d13b89d
--- /dev/null
+++ b/src/main/java/org/openpnp/vision/pipeline/ui/PipelineEditorPartsTableModel.java
@@ -0,0 +1,86 @@
+package org.openpnp.vision.pipeline.ui;
+
+import org.openpnp.model.Configuration;
+import org.openpnp.model.Part;
+import org.openpnp.model.Pipeline;
+
+import javax.swing.table.AbstractTableModel;
+import java.util.ArrayList;
+import java.util.List;
+
+public class PipelineEditorPartsTableModel extends AbstractTableModel implements Reorderable {
+    private static String[] columnNames = {"ID"};
+
+    private static Class<?>[] columnClasses = {String.class};
+
+    private final List<Part> parts;
+    private final Pipeline pipeline;
+
+    public PipelineEditorPartsTableModel(Pipeline pipeline) {
+        this.pipeline = pipeline;
+        parts = getParts();
+    }
+
+    public void refresh() {
+        fireTableDataChanged();
+    }
+
+    @Override
+    public int getRowCount() {
+        return parts.size();
+    }
+
+    @Override
+    public int getColumnCount() {
+        return columnNames.length;
+    }
+
+    @Override
+    public Object getValueAt(int rowIndex, int columnIndex) {
+        Part part = getPart(rowIndex);
+        if (columnIndex == 0) {
+            return part.getId();
+        }
+
+        return null;
+    }
+
+    @Override
+    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
+        Part part = getPart(rowIndex);
+        if (columnIndex == 0) {
+            part.setId(aValue.toString());
+        }
+    }
+
+    @Override
+    public String getColumnName(int column) {
+        return columnNames[column];
+    }
+
+    @Override
+    public Class<?> getColumnClass(int columnIndex) {
+        return columnClasses[columnIndex];
+    }
+
+    @Override
+    public void reorder(int fromIndex, int toIndex) {
+
+    }
+
+    public Part getPart(int index) {
+        return parts.get(index);
+    }
+
+    private List<Part> getParts() {
+        List<Part> result = new ArrayList<>();
+        Configuration.get().getParts().forEach(part -> {
+            //TODO: NK: not safe, ensure every part gets at least default pipeline, otherwise pipeline id is null
+            if (part.getPipeline().getId() != null && part.getPipeline().getId().equals(pipeline.getId())) {
+                result.add(part);
+            }
+        });
+
+        return result;
+    }
+}
diff --git a/src/main/java/org/openpnp/vision/pipeline/ui/PipelinePanel.java b/src/main/java/org/openpnp/vision/pipeline/ui/PipelinePanel.java
index 754e6fb6c4..0d14d223de 100644
--- a/src/main/java/org/openpnp/vision/pipeline/ui/PipelinePanel.java
+++ b/src/main/java/org/openpnp/vision/pipeline/ui/PipelinePanel.java
@@ -18,6 +18,7 @@ import org.openpnp.gui.components.ClassSelectionDialog;
 import org.openpnp.gui.support.Helpers;
 import org.openpnp.gui.support.Icons;
 import org.openpnp.gui.support.MessageBoxes;
+import org.openpnp.model.Part;
 import org.openpnp.spi.Camera;
 import org.openpnp.util.MovableUtils;
 import org.openpnp.vision.pipeline.CvPipeline;
@@ -37,6 +38,8 @@ public class PipelinePanel extends JPanel {
     private JTable partsTable;
     private JTable packagesTable;
     private StagesTableModel stagesTableModel;
+    private PipelineEditorPartsTableModel partsTableModel;
+    private StagesTableModel packagesTableModel;
     private PropertySheetPanel propertySheetPanel;
     private PipelinePropertySheetTable pipelinePropertySheetTable;
 
@@ -128,6 +131,17 @@ public class PipelinePanel extends JPanel {
         return splitPaneStages;
     }
 
+    private JScrollPane preparePartsPane() {
+        partsTableModel = new PipelineEditorPartsTableModel(editor.getUpperPipeline());
+        partsTable = preparePartsPackagesTable(partsTableModel);
+
+        JScrollPane scrollPaneStages = new JScrollPane(partsTable);
+
+        partsTable.changeSelection(partsTable.getRowCount()-1,  0,  false, false);
+
+        return scrollPaneStages;
+    }
+
     private void prepareToolbar() {
         JToolBar toolbar = new JToolBar();
         add(toolbar, BorderLayout.NORTH);
@@ -160,15 +174,26 @@ public class PipelinePanel extends JPanel {
         splitPanePartsPackages.setContinuousLayout(true);
         splitPanePartsPackages.setOrientation(JSplitPane.VERTICAL_SPLIT);
 
-        JScrollPane scrollPaneParts = new JScrollPane(partsTable);
         JScrollPane scrollPanePackages = new JScrollPane(packagesTable);
 
-        splitPanePartsPackages.setLeftComponent(scrollPaneParts);
+        splitPanePartsPackages.setLeftComponent(preparePartsPane());
         splitPanePartsPackages.setRightComponent(scrollPanePackages);
 
         return splitPanePartsPackages;
     }
 
+    private JTable preparePartsPackagesTable(AbstractTableModel tableModel) {
+        JTable table = new JTable(tableModel);
+        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
+        table.setDragEnabled(true);
+        table.setDropMode(DropMode.INSERT_ROWS);
+        table.setTransferHandler(new TableRowTransferHandler(table));
+        table.getColumnModel().getColumn(0).setPreferredWidth(100);
+        table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
+
+        return table;
+    }
+
     private JTable prepareTable(AbstractTableModel tableModel) {
         JTable table = new JTable(tableModel);
         table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
@@ -255,6 +280,17 @@ public class PipelinePanel extends JPanel {
         }
     }
 
+    public Part getSelectedPart() {
+        int index = partsTable.getSelectedRow();
+        if (index == -1) {
+            return null;
+        }
+        else {
+            index = partsTable.convertRowIndexToModel(index);
+            return partsTableModel.getPart(index);
+        }
+    }
+
     public Action newStageAction = new AbstractAction() {
         {
             putValue(SMALL_ICON, Icons.add);
-- 
2.28.0.windows.1

