/*
 * Copyright (C) 2011 Jason von Nieda <jason@vonnieda.org> and Cri.S <phone.cri@gmail.com>
 * 
 * This file is part of OpenPnP.
 * 
 * OpenPnP is free software: you can redistribute it and/or modify it under the terms of the GNU
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * OpenPnP is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with OpenPnP. If not, see
 * <http://www.gnu.org/licenses/>.
 * 
 * For more information about OpenPnP visit http://openpnp.org
 */

/*
 * This is a tailored version of the Named CSV importer used to import Altium CSV data.
 * This is/was required because Altium uses a different schema for rotations of components
 * on the bottom side, which this importer corrects for. In addition it only checks for 
 * column headers generated by Altum, making it a little bit more robust.
 */

package org.openpnp.gui.importer;

import java.awt.Frame;

import org.openpnp.Translations;
import org.openpnp.model.Abstract2DLocatable.Side;
import org.openpnp.model.Board;
import org.openpnp.model.Location;
import org.openpnp.model.Placement;

public class AltiumCSVImporter extends CSVImporter implements BoardImporter {
    private final static String NAME = "Altium .csv"; //$NON-NLS-1$
    private final static String DESCRIPTION = Translations.getString("AltiumCSVImporter.Importer.Description"); //$NON-NLS-1$

    private Board board;

    @Override
    public String getImporterName() {
        return NAME;
    }

    @Override
    public String getImporterDescription() {
        return DESCRIPTION;
    }

    @Override
    public Board importBoard(Frame parent) throws Exception {
    	// run Named CSV importer
    	board = super.importBoard(parent);
    	
    	// modify rotation of bottom side components
    	if (board != null) {
	        for (Placement p : board.getPlacements()) {
	        	if (p.getSide() == Side.Bottom) {
	        		Location l = p.getLocation();
	        		// set new location using corrected rotation
	        		p.setLocation(new Location(l.getUnits(), l.getX(), l.getY(), l.getZ(), 180 - l.getRotation()));
	        	}
	        }
    	}
    	
    	return board;
    }

    // lists of strings for each purpose to be found in the heading line
    // data read from file is converted to upper case before compare -> only list upper case pattern here
    // this is the list that is used by the default Named CSV importer
    private static final String cRefs[] = {"DESIGNATOR"}; //$NON-NLS-1$
    private static final String cVals[] = {"COMMENT"}; //$NON-NLS-1$
    private static final String cPacks[] = {"FOOTPRINT" }; //$NON-NLS-1$
    private static final String cXs[] = {"REF-X(MM)", "REF-X(MIL)", "CENTER-X(MM)", "CENTER-X(MIL)"}; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
    private static final String cYs[] = {"REF-Y(MM)", "REF-Y(MIL)", "CENTER-Y(MM)", "CENTER-Y(MIL)"}; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
    private static final String cRots[] = {"ROTATION"}; //$NON-NLS-1$
    private static final String cTBs[] = {"LAYER"}; //$NON-NLS-1$
    private static final String cHeights[] = {"HEIGHT(MIL)", "HEIGHT(MM)"}; //$NON-NLS-1$ //$NON-NLS-2$
    private static final String cComments[] = {"DESCRIPTION"}; //$NON-NLS-1$

    // provide methods to read the string arrays above
    @Override
    public String[] getRefs()     { return cRefs; }
    @Override
    public String[] getVals()     { return cVals; }
    @Override
    public String[] getPacks()    { return cPacks; }
    @Override
    public String[] getXs()       { return cXs; }
    @Override
    public String[] getYs()       { return cYs; }
    @Override
    public String[] getRots()     { return cRots; }
    @Override
    public String[] getTBs()      { return cTBs; }
    @Override
    public String[] getHeights()  { return cHeights; }
    @Override
    public String[] getComments() { return cComments; }
}
