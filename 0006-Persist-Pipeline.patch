From ab73f4cc48b3d94da8df7fb70266ae5b54b2585b Mon Sep 17 00:00:00 2001
From: karlinik <karlikova.nikola@gmail.com>
Date: Fri, 3 Sep 2021 16:25:37 +0200
Subject: [PATCH 06/11] Persist Pipeline

---
 .../vision/ReferenceBottomVision.java         | 31 +++----------------
 ...erenceBottomVisionConfigurationWizard.java | 19 ++++++------
 ...ceBottomVisionPartConfigurationWizard.java |  2 +-
 .../wizards/VisionConfigurationWizard.java    |  1 +
 .../java/org/openpnp/model/Configuration.java |  6 ++++
 src/main/java/org/openpnp/model/Part.java     |  8 +++--
 src/main/java/org/openpnp/model/Pipeline.java |  8 +++--
 7 files changed, 33 insertions(+), 42 deletions(-)

diff --git a/src/main/java/org/openpnp/machine/reference/vision/ReferenceBottomVision.java b/src/main/java/org/openpnp/machine/reference/vision/ReferenceBottomVision.java
index 993d0e554a..b3273dd390 100644
--- a/src/main/java/org/openpnp/machine/reference/vision/ReferenceBottomVision.java
+++ b/src/main/java/org/openpnp/machine/reference/vision/ReferenceBottomVision.java
@@ -139,7 +139,7 @@ public class ReferenceBottomVision implements PartAlignment {
         MovableUtils.moveToLocationAtSafeZ(nozzle, nozzleLocation);
         final Location center = new Location(maxLinearOffset.getUnits());
         
-        try (CvPipeline cvPipeline = partSettings.getPipeline()) {
+        try (CvPipeline cvPipeline = part.getCvPipeline()) {
 
             // The running, iterative offset.
             Location offsets = new Location(nozzleLocation.getUnits());
@@ -233,7 +233,7 @@ public class ReferenceBottomVision implements PartAlignment {
         
         MovableUtils.moveToLocationAtSafeZ(nozzle, wantedLocation);
 
-        try (CvPipeline cvPipeline = partSettings.getPipeline()) {
+        try (CvPipeline cvPipeline = part.getCvPipeline()) {
             RotatedRect rect = processPipelineAndGetResult(cvPipeline, camera, part, nozzle);
             camera=(Camera)cvPipeline.getProperty(CAMERA);
 
@@ -520,7 +520,7 @@ public class ReferenceBottomVision implements PartAlignment {
     public PartSettings getPartSettings(Part part) {
         PartSettings partSettings = this.partSettingsByPartId.get(part.getId());
         if (partSettings == null) {
-            partSettings = new PartSettings(this);
+            partSettings = new PartSettings(this, part);
             this.partSettingsByPartId.put(part.getId(), partSettings);
         }
         return partSettings;
@@ -541,10 +541,8 @@ public class ReferenceBottomVision implements PartAlignment {
 
     @Override
     public Wizard getPartConfigurationWizard(Part part) {
-        PartSettings partSettings = getPartSettings(part);
         try {
-            partSettings.getPipeline()
-                        .setProperty(CAMERA, VisionUtils.getBottomVisionCamera());
+            part.getCvPipeline().setProperty(CAMERA, VisionUtils.getBottomVisionCamera());
         }
         catch (Exception e) {
         }
@@ -588,24 +586,13 @@ public class ReferenceBottomVision implements PartAlignment {
         
         @Element(required = false)
         protected Location visionOffset = new Location(LengthUnit.Millimeters);
-        
-        @Element
-        protected CvPipeline pipeline;
 
         public PartSettings() {
 
         }
 
-        public PartSettings(ReferenceBottomVision bottomVision) {
+        public PartSettings(ReferenceBottomVision bottomVision, Part part) {
             setEnabled(bottomVision.isEnabled());
-            try {
-                //TODO: NK: get pipeline from xml/from the part
-                setPipeline(bottomVision.getPipeline()
-                                        .clone());
-            }
-            catch (Exception e) {
-                throw new Error(e);
-            }
         }
 
         public boolean isEnabled() {
@@ -623,14 +610,6 @@ public class ReferenceBottomVision implements PartAlignment {
         public void setPreRotateUsage(PreRotateUsage preRotateUsage) {
             this.preRotateUsage = preRotateUsage;
         }
-
-        public CvPipeline getPipeline() {
-            return pipeline;
-        }
-
-        public void setPipeline(CvPipeline pipeline) {
-            this.pipeline = pipeline;
-        }
         
         public MaxRotation getMaxRotation() {
             return maxRotation;
diff --git a/src/main/java/org/openpnp/machine/reference/vision/wizards/ReferenceBottomVisionConfigurationWizard.java b/src/main/java/org/openpnp/machine/reference/vision/wizards/ReferenceBottomVisionConfigurationWizard.java
index b170c82fb8..2beebe22da 100644
--- a/src/main/java/org/openpnp/machine/reference/vision/wizards/ReferenceBottomVisionConfigurationWizard.java
+++ b/src/main/java/org/openpnp/machine/reference/vision/wizards/ReferenceBottomVisionConfigurationWizard.java
@@ -100,15 +100,16 @@ public class ReferenceBottomVisionConfigurationWizard extends AbstractConfigurat
                     "This will replace all custom part pipelines with the current pipeline. Are you sure?",
                     null, JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
             if (result == JOptionPane.YES_OPTION) {
-                UiUtils.messageBoxOnException(() -> {
-                    for (PartSettings partSettings : bottomVision.getPartSettingsByPartId()
-                                                                 .values()) {
-                        partSettings.setPipeline(bottomVision.getPipeline()
-                                                             .clone());
-                    }
-                    MessageBoxes.infoBox("Parts Reset",
-                            "All custom part pipelines have been reset.");
-                });
+                //TODO: NK change using configuration parts
+//                UiUtils.messageBoxOnException(() -> {
+//                    for (PartSettings partSettings : bottomVision.getPartSettingsByPartId()
+//                                                                 .values()) {
+//                        partSettings.setPipeline(bottomVision.getPipeline()
+//                                                             .clone());
+//                    }
+//                    MessageBoxes.infoBox("Parts Reset",
+//                            "All custom part pipelines have been reset.");
+//                });
             }
         });
         panel.add(btnResetAllTo, "8, 4");
diff --git a/src/main/java/org/openpnp/machine/reference/vision/wizards/ReferenceBottomVisionPartConfigurationWizard.java b/src/main/java/org/openpnp/machine/reference/vision/wizards/ReferenceBottomVisionPartConfigurationWizard.java
index 189904b9ad..83bab47d15 100644
--- a/src/main/java/org/openpnp/machine/reference/vision/wizards/ReferenceBottomVisionPartConfigurationWizard.java
+++ b/src/main/java/org/openpnp/machine/reference/vision/wizards/ReferenceBottomVisionPartConfigurationWizard.java
@@ -139,7 +139,7 @@ public class ReferenceBottomVisionPartConfigurationWizard extends AbstractConfig
             if (result == JOptionPane.YES_OPTION) {
                 UiUtils.messageBoxOnException(() -> {
                     //TODO NK: reset to default part/package, not the global one
-                    partSettings.setPipeline(bottomVision.getPipeline().clone());
+                    part.getPipeline().setCvPipeline(bottomVision.getPipeline().clone());
                     editPipeline();
                 });
             }
diff --git a/src/main/java/org/openpnp/machine/reference/vision/wizards/VisionConfigurationWizard.java b/src/main/java/org/openpnp/machine/reference/vision/wizards/VisionConfigurationWizard.java
index 26dd12689f..db711be058 100644
--- a/src/main/java/org/openpnp/machine/reference/vision/wizards/VisionConfigurationWizard.java
+++ b/src/main/java/org/openpnp/machine/reference/vision/wizards/VisionConfigurationWizard.java
@@ -24,6 +24,7 @@ public class VisionConfigurationWizard extends AbstractConfigurationWizard {
 
     JPanel panel;
 
+    //TODO: NK May need also ReferenceBottomVision or parts/packages settings
     public VisionConfigurationWizard(ReferenceBottomVision.PipelineSettings pipelineSettings) {
         this.pipelineSettings = pipelineSettings;
         createUi();
diff --git a/src/main/java/org/openpnp/model/Configuration.java b/src/main/java/org/openpnp/model/Configuration.java
index 580e67d9cc..1353a73983 100644
--- a/src/main/java/org/openpnp/model/Configuration.java
+++ b/src/main/java/org/openpnp/model/Configuration.java
@@ -430,6 +430,12 @@ public class Configuration extends AbstractModelObject {
         catch (Exception e) {
             throw new Exception("Error while saving parts.xml (" + e.getMessage() + ")", e);
         }
+        try {
+            savePipelines(createBackedUpFile("pipelines.xml", now));
+        }
+        catch (Exception e) {
+            throw new Exception("Error while saving pipelines.xml (" + e.getMessage() + ")", e);
+        }
     }
 
     protected File createBackedUpFile(String fileName, LocalDateTime now) throws Exception {
diff --git a/src/main/java/org/openpnp/model/Part.java b/src/main/java/org/openpnp/model/Part.java
index 719d4a34b6..b67f3cc224 100644
--- a/src/main/java/org/openpnp/model/Part.java
+++ b/src/main/java/org/openpnp/model/Part.java
@@ -68,6 +68,10 @@ public class Part extends AbstractModelObject implements Identifiable {
             public void configurationLoaded(Configuration configuration) {
                 partPackage = configuration.getPackage(packageId);
                 pipeline = configuration.getPipeline(pipelineId);
+
+                if (pipeline == null) {
+                    pipeline = new Pipeline();
+                }
             }
         });
     }
@@ -75,6 +79,7 @@ public class Part extends AbstractModelObject implements Identifiable {
     @Persist
     private void persist() {
         packageId = (partPackage == null ? null : partPackage.getId());
+        pipelineId = (pipeline == null ? null : pipeline.getId());
     }
 
     @Override
@@ -163,9 +168,6 @@ public class Part extends AbstractModelObject implements Identifiable {
     }
 
     public CvPipeline getCvPipeline() {
-        if(pipeline == null) {
-            return new CvPipeline();
-        }
         return pipeline.getCvPipeline();
     }
 
diff --git a/src/main/java/org/openpnp/model/Pipeline.java b/src/main/java/org/openpnp/model/Pipeline.java
index 9de0ee966a..2331f8f06a 100644
--- a/src/main/java/org/openpnp/model/Pipeline.java
+++ b/src/main/java/org/openpnp/model/Pipeline.java
@@ -24,11 +24,13 @@ public class Pipeline extends AbstractModelObject implements Identifiable {
     }
 
     public CvPipeline getCvPipeline() {
-        if (cvPipeline == null) {
-            cvPipeline = new CvPipeline();
-        }
+        //TODO: NK check if really initialize, should not be ever null
         return cvPipeline;
     }
 
+    public void setCvPipeline(CvPipeline cvPipeline) {
+        this.cvPipeline = cvPipeline;
+    }
+
     //TODO: contructor for creation of a new pipeline
 }
-- 
2.28.0.windows.1

