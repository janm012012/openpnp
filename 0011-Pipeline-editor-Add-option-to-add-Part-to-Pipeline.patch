From 1f1b487f284442465b08f9fffbb736f1d54b740d Mon Sep 17 00:00:00 2001
From: karlinik <karlikova.nikola@gmail.com>
Date: Tue, 21 Sep 2021 22:07:21 +0200
Subject: [PATCH 11/11] Pipeline editor: Add option to add Part to Pipeline

New Selection dialog currently only for Parts.
---
 .../PartPackageSelectionDialog.java           | 116 ++++++++++++++++++
 .../vision/pipeline/ui/PipelinePanel.java     |  22 +++-
 2 files changed, 137 insertions(+), 1 deletion(-)
 create mode 100644 src/main/java/org/openpnp/gui/components/PartPackageSelectionDialog.java

diff --git a/src/main/java/org/openpnp/gui/components/PartPackageSelectionDialog.java b/src/main/java/org/openpnp/gui/components/PartPackageSelectionDialog.java
new file mode 100644
index 0000000000..cbeb088fbf
--- /dev/null
+++ b/src/main/java/org/openpnp/gui/components/PartPackageSelectionDialog.java
@@ -0,0 +1,116 @@
+package org.openpnp.gui.components;
+
+import org.openpnp.model.Part;
+
+import javax.swing.*;
+import javax.swing.border.EmptyBorder;
+import javax.swing.border.EtchedBorder;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import java.util.List;
+
+@SuppressWarnings("serial")
+public class PartPackageSelectionDialog extends JDialog {
+    public static final String ESCAPE = "ESCAPE";
+    private Part selectedPart;
+    private JList<Part> partSelectionJList;
+
+    public PartPackageSelectionDialog(Frame parent, String title, String description,
+                                      List<Part> partList) {
+        super(parent, title, true);
+
+        JPanel panel = new JPanel();
+        panel.setBorder(new EmptyBorder(8, 8, 4, 8));
+        getContentPane().add(panel, BorderLayout.CENTER);
+        panel.setLayout(new BorderLayout(0, 0));
+
+        JPanel panelActions = new JPanel();
+        panel.add(panelActions, BorderLayout.SOUTH);
+        panelActions.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
+
+        JButton btnCancel = new JButton(cancelAction);
+        panelActions.add(btnCancel);
+
+        JButton btnSelect = new JButton(selectAction);
+        panelActions.add(btnSelect);
+
+        JLabel lblDescription =
+                new JLabel("");
+        lblDescription.setBorder(new EmptyBorder(4, 4, 8, 4));
+        panel.add(lblDescription, BorderLayout.NORTH);
+        lblDescription.setHorizontalAlignment(SwingConstants.LEFT);
+        lblDescription.setText(description);
+
+        partSelectionJList = new JList<>();
+        partSelectionJList.addMouseListener(new MouseAdapter() {
+            @Override
+            public void mouseClicked(MouseEvent e) {
+                if (e.getClickCount() == 2) {
+                    selectAction.actionPerformed(null);
+                }
+            }
+        });
+        partSelectionJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
+        partSelectionJList.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
+        panel.add(new JScrollPane(partSelectionJList), BorderLayout.CENTER);
+        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
+        setSize(400, 400);
+        setLocationRelativeTo(parent);
+
+        DefaultListModel<Part> listModel = new DefaultListModel<>();
+        partSelectionJList.setModel(listModel);
+        for (Part item : partList) {
+            listModel.addElement(item);
+        }
+
+        partSelectionJList.addListSelectionListener(e -> {
+            if (e.getValueIsAdjusting()) {
+                return;
+            }
+            selectAction.setEnabled(PartPackageSelectionDialog.this.partSelectionJList.getSelectedValue() != null);
+        });
+        partSelectionJList.setCellRenderer(new IdRenderer());
+
+        JRootPane rootPane = getRootPane();
+        KeyStroke stroke = KeyStroke.getKeyStroke(ESCAPE);
+        InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
+        inputMap.put(stroke, ESCAPE);
+        rootPane.getActionMap().put(ESCAPE, cancelAction);
+
+        selectAction.setEnabled(false);
+    }
+
+    private final Action selectAction = new AbstractAction("Accept") {
+        @Override
+        public void actionPerformed(ActionEvent arg0) {
+            selectedPart = partSelectionJList.getSelectedValue();
+            setVisible(false);
+        }
+    };
+
+    private final Action cancelAction = new AbstractAction("Cancel") {
+        @Override
+        public void actionPerformed(ActionEvent arg0) {
+            setVisible(false);
+        }
+    };
+
+    public Part getSelected() {
+        return selectedPart;
+    }
+
+    class IdRenderer extends DefaultListCellRenderer {
+        @Override
+        public Component getListCellRendererComponent(
+                JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
+            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
+
+            Part part = (Part) value;
+            setText(part.getId() + " (" + part.getPackage() + ")");
+
+            return this;
+        }
+    }
+}
diff --git a/src/main/java/org/openpnp/vision/pipeline/ui/PipelinePanel.java b/src/main/java/org/openpnp/vision/pipeline/ui/PipelinePanel.java
index 758992ec99..8df5830ea1 100644
--- a/src/main/java/org/openpnp/vision/pipeline/ui/PipelinePanel.java
+++ b/src/main/java/org/openpnp/vision/pipeline/ui/PipelinePanel.java
@@ -12,9 +12,11 @@ import javax.swing.*;
 import javax.swing.table.AbstractTableModel;
 
 import org.openpnp.gui.components.ClassSelectionDialog;
+import org.openpnp.gui.components.PartPackageSelectionDialog;
 import org.openpnp.gui.support.Helpers;
 import org.openpnp.gui.support.Icons;
 import org.openpnp.gui.support.MessageBoxes;
+import org.openpnp.model.Configuration;
 import org.openpnp.model.Part;
 import org.openpnp.spi.Camera;
 import org.openpnp.util.MovableUtils;
@@ -430,8 +432,26 @@ public class PipelinePanel extends JPanel {
         @Override
         public void actionPerformed(ActionEvent arg0) {
             System.out.println("New part/package action called");
-            JDialog dialog = new JDialog();
+            List<Part> parts = Configuration.get().getParts();
+            //TODO NK: unmodifiable list, cannot sort
+            PartPackageSelectionDialog dialog = new PartPackageSelectionDialog(JOptionPane.getFrameForComponent(PipelinePanel.this), "New Part",
+                    "Please select a part from the list below.", parts);
             dialog.setVisible(true);
+
+            Part selectedPart = dialog.getSelected();
+
+            if (selectedPart == null) {
+                return;
+            }
+            try {
+                selectedPart.setPipeline(editor.getUpperPipeline());
+                partsTableModel.refresh();
+//                Helpers.selectLastTableRow(partsTable);
+            }
+            catch (Exception e) {
+                MessageBoxes.errorBox(JOptionPane.getFrameForComponent(PipelinePanel.this), "Error",
+                        e);
+            }
         }
     }
 
-- 
2.28.0.windows.1

